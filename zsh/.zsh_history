rm -rf .codewhisperer.dotfiles.bak
rm -rf fish
rm -rf .viminfo .vscode .yarn  .yarnrc .zsh_history
rm -rf .vim
cd .config
rm -rf .plugins
rm -rf .zshrc@
ls -la
rm -rf .zsh_history
stow -D zsh\

brew
./init.lua
v .
nvm list
git clone https://github.com/ThePrimeagen/init.lua
cd nvim
cd lua
./dev
brew install ripgrep
brew list | grep "^stow$";
brew list | grep "^node$";
brew list | grep "^iterm2$";
brew list
brew list | grep "^font-meslo-lg-nerd-font$";
! command -v brew &> /dev/null;
command -v brew &> /dev/null;
cd .dotfiles
init_system
chmod 755 init_system
./init_system
rm -rf .DS_Store
./clean_env
stow -D zsh
./start
$NVM_DIR
echo $NVM_DIR
echo $PATH
brew unistall 
brew uninstall node
node
nvm
source "$HOME/.sdkman/bin/sdkman-init.sh"
sdkman
v .zprofile
v .zcompdump
sdk version
java
v
pip install requirements.txt
pip install requirements.txt -r
source .vnev/bin/activate
pip install -r requirements.txt
/usr/bin/python3 /Users/youssef/git/foodhub/generateInserts.py
ll
git clone git@github.com:cded/db-data-generator.git
cd db-data-generator
python -m pip install requests
python -v
pip --help
/Library/Developer/CommandLineTools/usr/bin/python3 -m pip install --upgrade pip
/usr/bin/python3 /Users/youssef/git/db-data-generator/generateInserts.py
python -m venv
pip lit
pip uninstall urllib3
pip install 'urllib3<2.0'
python ./generateInserts.py
source venv/bin/activate
pip install replicate
curl \\
  -H 'Content-Type: application/json' \\
  -d '{"contents":[{"parts":[{"text":"Write a story about a magic backpack"}]}]}' \\
  -X POST https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=AIzaSyBCfSWmEBdrR2mX0wZCDCIYitPCH70sS1A
curl \\
  -H 'Content-Type: application/json' \\
  -d '{"contents":[{"parts":[{"text":"Write a story about a magic backpack"}]}]}' \\
  -X POST "https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=AIzaSyBCfSWmEBdrR2mX0wZCDCIYitPCH70sS1A"
pip freeze | xargs pip uninstall -y
pip install dotenv
pip install python-dotenv
pip install -q -U google-generativeai
node &
vmrss 70279
vm_stat
vm_stat 70279
ps aux | grep -w 70279
cd .Trash
mkdir .vscode
cd .vscode
cd git/foodhub
psql postgres
psql -u cded
psql cded
/Users/youssef/git/db-data-generator/.venv/bin/python /Users/youssef/git/db-data-generator/generateInserts.py
/usr/bin/python3 /Users/youssef/.vscode/extensions/ms-python.python-2023.22.1/pythonFiles/printEnvVariablesToFile.py /Users/youssef/.vscode/extensions/ms-python.python-2023.22.1/pythonFiles/deactivate/zsh/envVars.txt
yarn test LinearSearchList.ts
cd //
mvn clean
./mvnw clean install
echo /bin/zsh
git clone git@github.com:ThePrimeagen/kata-machine.git
cd kata-machine
yarn install
yarn generate
npx jest Linear
npx jest Binary
npx jest BinarySearch
npx jest Bubble
pip install asyncio
pip -v
python3 generateInserts.py
python generateInserts.py
pip freeze > requirements.txt
pip freeze
pip -V
which python
which python3
source env/bin/activate
source .env/bin/activate
pip freeze --all
pip list
node .
node interview.js
pwd
cp interview.js /Users/youssef/Downloads
git clone git@github.com:cded/moviesubs-gen.git
cd moviesubs-gen
python -m venv .
python -m venv .venv
source .venv/bin/activate
pip install -U openai-whisper
whisper audio.flac audio.mp3 audio.wav
whisper --gelp
whisper audio.mp3
sudo apt-get install ffmpeg
brew install ffmpeg
whisper audio.mp3 --fp16 False
whisper audio.mp3 --fp16 False --output-format srt
whisper audio.mp3 --fp16 False --output_format srt
whisper audio.mp3 --fp16 False --output_format srt --language english
whisper audio.mp3 --fp16 False --output_format srt --language 'en'
whisper trailer.mp4 --fp16 False --output_format srt --language 'en'
whisper movie.mp4 --fp16 False --output_format srt --language 'en'
whisper --help
whisper movie.mp4 --fp16 False --output_format srt --language 'en' --threads 20
whisper hitler.avi --fp16 False --output_format srt --threads 4
ipconfig
ipconfig getifaddr
ifconfig
ipconfig getidaddr en0
ipconfig getifaddr en0
netstat -at
netstat -nr
tcpdump -nS
code requests.http
mv /Users/youssef/git/db-data-generator/extracted_sql_statements.sql .
psql -d foodhub -U cded -f extracted_sql_statements.sql
mv /Users/youssef/git/db-data-generator/inserts.sql .
postgres -v
postgres -V
cp /Users/youssef/git/db-data-generator/inserts.sql .
psql -d foodhub -U cded
psql -d foodhub -U cded -f inserts.sql
vim
cd .aws
open .
cd .ssh
ls /
/usr/bin/python3 /Users/youssef/.vscode/extensions/ms-python.python-2024.0.1/pythonFiles/printEnvVariablesToFile.py /Users/youssef/.vscode/extensions/ms-python.python-2024.0.1/pythonFiles/deactivate/zsh/envVars.txt
/Users/youssef/git/workout-program/pocketbase ; exit;
code app-staffing
git clone git@github.com:cded/custom-interpreter.git
cd custom-interpreter
mv /Users/youssef/Downloads/waiig_code_1.7 .
curl "http://localhost:3444"
curl "http://localhost:3444/heelo"
curl "http://localhost:3444/api/v1/shorten"
curl "http://localhost:3444/api/v1/shorten" -m POST
curl --help
curl -X POST "http//localhost:3444/api/v1/shorten"
clear
curl -X POST "http://localhost:3444/api/v1/shorten"
curl -X POST "http://localhost:3444/api/v1/shorten" -d {"longURL": "test"}
curl -X POST "http://localhost:3444/api/v1/shorten" -d '{"longURL": "test"}'
curl -X POST "http://localhost:3444/api/v1/shorten" -d '{"longURL": "10"}'
curl -X POST "http://localhost:3444/api/v1/shorten" -d '{"longURLS": "test"}'
tsc
cd web
npm run build
npm run tsc
./kafka-topics.sh --create --topic myTopic -zookeeper \\
 localhost:2181 --replication-factor 1 --partitions 1
./bin/kafka-topics.sh --create --topic myTopic -zookeeper \\
 localhost:2181 --replication-factor 1 --partitions 1
./bin/kafka-topics.sh --create --topic myTopic -zookeeper localhost:2181 --replication-factor 1 --partitions 1
./bin/kafka-topics.sh --create --topic myTopic --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1
./kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic myTopic
./bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic myTopic
bin/kafka-server-start.sh config/server.properties
cd private
cd aws
la
ssh -i "A4L.pem" ec2-user@ec2-3-80-52-141.compute-1.amazonaws.com
./kafka/bin/zookeeper-server-start.sh kafka/config/zookeeper.properties
java -version
./gradlew jar -PscalaVersion=2.13.11
cd kafka
bin/zookeeper-server-start.sh config/zookeeper.properties
go
go work use token
go help work
go mod help
cd token
go init
go mod tidy
go work init
go work use .src/token .src/lexer
cd src
go mod init
go mod init .
go mod init monkey
go work use ./src/token ./src/lexer
go work use .
go test ./lexer
go test ./src/lexer
curl --header "Content-Type: application/json" -X POST "http://localhost:3444/api/v1/shorten" -d '{"longURLS": "test"}'
curl --header "Content-Type: application/json" -X POST "http://localhost:3444/api/v1/shorten" -d '{"longURL": "test"}'
curl --header "Content-Type: application/json" -X POST "http://localhost:3444/api/v1/shorten" -d '{"longURL": " https://en.wikipedia.org/wiki/Systems_design"}'
git clone git@github.com:cded/url-shortener.git
cd url-shortener
go mod init urlshortner.yakl.ca
go mod init github.com/cded/url-shortner
go run .
postgres --help
postgres
postgres -u root
psql -U cded
psql -U root
psql -u root
psql --help
brew services restart  postgresql
rm /opt/homebrew/var/postgres/postmaster.pid
pgrep -l postgres
psql -U postgres
ps -ef | grep postgres
sudo find /tmp/ -name .s.PGSQL.5432
psql -h /tmp/ dbname
psql
pg_ctlcluster
psql -h /tmp/ foodhub
psql -h /tmp/ root
psql -h /tmp/ postgres
go get github.com/lib/pq
go run ./cmd/web
psql -h /tmp/ urlshorts;
go run ./cmd/web -dsn="user=youssef dbname=urlshorts host=localhost port=5432"
go run ./cmd/web -dsn="user=youssef dbname=urlshorts host=localhost port=5431 sslmode=disable"
go run ./cmd/web -dsn="user=youssef dbname=urlshorts host=localhost port=5432 sslmode=disable"
ls
cd fast-react-static-renderer-operations
cd ..
cd app-staffing
code .
